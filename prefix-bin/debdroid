#!/data/data/com.termux/files/usr/bin/bash
### DEBDROID v2.19-R2.
### Made By WMCB Tech @wmcbtech30
### This script should not be modified at some cases
### Dependencies Required
### proot, tar, wget, dialog, pulseaudio
###
### This script uses Andronix Resources as if debootstrap may fail the installation
set -e -u
ROOTFS="$PREFIX/share/debdroid/rootfs"
CONFIG="$PREFIX/share/debdroid/config"
PATHBASE="/usr/local/bin:/usr/local/sbin:/usr/local/games:/bin:/sbin:/usr/bin:/usr/sbin:/usr/games"
STATEFUL="$PREFIX/share/debdroid"
STATUS="$PREFIX/share/debdroid/rootfs/usr/lib/.libdone.so.9"

## Root Detection
## Running This script as root will fail and mess up permissions
## And Prevent this script to run inside fakeroot also
if [[ $EUID -eq 0 ]]; then
  echo "This script should not be run as ROOT. please use linux deploy instead" 1>&2
  exit 1
fi

check-network-connectivity(){
	if ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
  		exec
	else
  		echo "Cannot connect to network. Try Checking your network connection. Aborting exit code 2"
		exit 2
	fi
}

check-dlcache() {
	if [ -e $HOME/.cache/dlcache.tar.*z ]; then
		echo "Existing Image File Found. Skipping Download and Extracting the rootfs"
		echo "Unpacking The Base System.... This may take a few minutes"
		proot --link2symlink -0 tar -xf $HOME/.cache/dlcache.tar.*z --exclude dev -C $ROOTFS > /dev/null 2>&1
	else
		echo "Downloading the Debian Image file....."
		mkdir -p $HOME/.cache >/dev/null 2>&1 &&
		wget "https://github.com/WMCB-Tech/AndronixOrigin/raw/master/Rootfs/Debian/${archurl}/debian-rootfs-${archurl}.tar.xz?raw=true" -O $HOME/.cache/dlcache.tar.xz &&
		echo "Unpacking The Base System.... This may take a few minutes"
		proot --link2symlink -0 tar -xf $HOME/.cache/dlcache.tar.*z --exclude dev -C $ROOTFS > /dev/null 2>&1
	fi
}

show_help(){
	echo "DebDroid: An Easy to Use Debian Installer for non-rooted devices"
	echo ""
	echo "Usage: debdroid [command]"
	echo ""
	echo " --install	Installs an Debian Distribution"
	echo " --uninstall	Uninstalls a Debian Distribution"
	echo " --reinstall	Reinstalls a Debian Distribution"
	echo " --launch	Launches Debian Distribution as Regular User"
	echo " --launch-su	Launches Debian Distribution as Root"
	echo " --isolated	Launches Debian Distribution without host storage access"
	echo " --import	Imports the Debian Container Image"
	echo " --export	Exports the Debian Container Image"
	echo ""
	echo "To Pass Command within DebDroid. use the '--' option or '---' if isolated"
	echo "e.g.:"
	echo "	debdroid -- sudo apt update"
	echo "	debdroid -- nano"
	echo "	debdroid --- sudo apt upgrade"
	echo ""
	echo "File Sharing Options:"
	echo " --send		Sends file/folder to user's home directory"
	echo " --share	Shares Directory through /mnt/shared directory"
	echo " --unshare	Unshares the Shared Directory"
	echo ""
	echo "Sharing Examples: "
	echo "	debdroid --send /sdcard/code.py"
	echo "	debdroid --share ~/directory"
	echo ""
	exit 2
}

exitcode(){
	echo ""
	echo "Exiting as Requested... Probably Installation Interruption"
	echo "To fix this. reinstall it by typing 'debdroid --reinstall'"
	echo ""
	exit 2
}

install-debian() {
	trap 'exitcode' HUP INT QUIT TERM KILL
	if [ -e $STATUS ]; then
    		echo "An Existing Installation Found. Please Uninstall a Distro First"
			exit 2
	else
    		echo "Preparing to Install a Debian Container."
	fi
	### Check Network
	check-network-connectivity
	### Check for an Architecture
	case `dpkg --print-architecture` in
		aarch64)
			archurl="arm64" ;;
		arm)
			archurl="armhf" ;;
		amd64)
			archurl="amd64" ;;
		x86_64)
			archurl="amd64" ;;
		i*86)
			archurl="i386" ;;
		x86)
			archurl="i386" ;;
		*)
			echo "unknown architecture"; exit 1 ;;
	esac
	check-dlcache
	echo "Configuring the Base System.. This may take Several Minutes"
	echo ""
	set-android-groups || true
	install $CONFIG/stat $ROOTFS/proc/stat &&
	install $CONFIG/version $ROOTFS/proc/version &&
	install $CONFIG/resolv.conf $ROOTFS/etc/resolv.conf &&
	install $CONFIG/libdone.so.9 $ROOTFS/usr/lib/.libdone.so.9 &&
	install -m 755 $CONFIG/distro-config.sh $ROOTFS/opt/distro-config.sh &&
	bash $CONFIG/configure.sh &&
	echo "Cleaning Up....."
	echo ""
	rm -rf $ROOTFS/opt/distro-config.sh &&
	echo "Debian Container Successfully Installed. To Start type: debdroid --launch"
	echo ""
	exit 1
}

uninstall() {
	echo "WARNING: you are about to uninstall a linux distribution in 10 seconds"
	echo "to stop hit Ctrl-C before Uninstallation"
	sleep 10 &&
	echo "Uninstalling an Linux Distro... "
	chmod 777 -R $ROOTFS > /dev/null 2>&1 || true
	rm -rf $STATEFUL/rootfs > /dev/null 2>&1 &&
	mkdir $STATEFUL/rootfs > /dev/null 2>&1 &&
	echo "Debian Container Successfully Uninstalled"
}

set-android-groups(){
	### This should atleast fix group errors for Ubuntu Guests
	echo "aid_$(id -un):x:$(id -u):$(id -g):Android Groups:/:/usr/sbin/nologin" >> "$ROOTFS/etc/passwd"
	echo "aid_$(id -un):*:18446:0:99999:7:::" >> "$ROOTFS/etc/shadow"
	local g
		for g in $(id -G); do
			echo "aid_$(id -gn "$g"):x:${g}:root,aid_$(id -un)" >> "$ROOTFS/etc/group"
			if [ -f "$ROOTFS/etc/gshadow" ]; then
				echo "aid_$(id -gn "$g"):*::root,aid_$(id -un)" >> "$ROOTFS/etc/gshadow"
			fi
		done
}

send() {
	SEND_ARGS="$@"
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot stat Debian Container. Please install it using debdroid '--install'"
		exit 2
	fi
	### Check for an Argument
	if [ ! -z "$SEND_ARGS" ]; then
		:
	else
		echo "Please Specify a File/Folder to Send"
		exit 2
	fi
	### Check for a file to Send
	if [ ! -e $SEND_ARGS ]; then
		echo "Cannot Send file to the Container: No Such file or Directory"
		exit 2
	fi
	### Send files
	echo ""
	echo "Sending File: $SEND_ARGS"
	cp -r $SEND_ARGS $ROOTFS/home/$(cat $ROOTFS/etc/userinfo.rc)/ >/dev/null 2>&1 || true
	echo "The File $SEND_ARGS successfully sent at your Home Directory"
}

share() {
	SHARE_ARGS="$@"
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot stat Debian Container. Please install it using debdroid '--install'"
		exit 2
	fi
	### Ask for Directory
	if [ ! -z "$SHARE_ARGS" ]; then
		:
	else
		echo "Please Specify a Directory to Share"
		exit 2
	fi
	### Check if a directory is specified else abort
	if [ ! -d $SHARE_ARGS ]; then
		echo "Cannot Apply Share Properties. either you're trying to share a non-directory or directory isn't exists"
		exit 2
	fi
	### Share Directory
	echo "Applying Share Properties"
	echo "-b $(realpath $SHARE_ARGS):/mnt/shared" > $ROOTFS/.proot.shareinfo
	echo "The Directory $SHARE_ARGS is now shared and located at /mnt/shared. you can unshare it by typing:"
	echo "debdroid --unshare"
}

unshare(){
	if [ -e $STATUS ]; then
		:
	else
		echo "Cannot Perform Unshare. Container isn't installed"
		exit 2
	fi
	### Simply delete the metadata
	rm -rf $ROOTFS/.proot.shareinfo >/dev/null 2>&1 || true
}

launch() {
	local SHARE_PROPERTIES=""
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot start Debian Container. Please install it using debdroid --install"
		exit 2
	fi
	### Check for Extra Shares
	if [ -e $ROOTFS/.proot.shareinfo ]; then
		export SHARE_PROPERTIES="$(cat $ROOTFS/.proot.shareinfo)"
	fi
	unset LD_PRELOAD
	start-pulseaudio
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H \
	$SHARE_PROPERTIES \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /dev/urandom:/dev/random \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b /storage/emulated/0:/sdcard \
	-b /:/host-rootfs \
	-w /root \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	/bin/su -l $(cat $ROOTFS/etc/userinfo.rc) || true
	:
	exec stop-pulseaudio || true
}

launch-su() {
	local SHARE_PROPERTIES=""
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot start Debian Container. Please install it using debdroid --install"
		exit 2
	fi
	### Check for Extra Shares
	if [ -e $ROOTFS/.proot.shareinfo ]; then
		export SHARE_PROPERTIES="$(cat $ROOTFS/.proot.shareinfo)"
	fi
	unset LD_PRELOAD
	start-pulseaudio
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H \
	$SHARE_PROPERTIES \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /dev/urandom:/dev/random \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b /storage/emulated/0:/sdcard \
	-b /:/host-rootfs \
	-w /root \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	/bin/su -l || true
	:
	exec stop-pulseaudio || true
}

launch-isol() {
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot start Debian Container. Please install it using debdroid --install"
		exit 2
	fi
	unset LD_PRELOAD
	start-pulseaudio
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-w /root \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	/bin/su -l $(cat $ROOTFS/etc/userinfo.rc) || true
	:
	exec stop-pulseaudio || true
}

parse-cmd() {
	local SHARE_PROPERTIES=""
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot start Debian Container. Please install it using debdroid --install"
		exit 2
	fi
	### Check for Extra Shares
	if [ -e $ROOTFS/.proot.shareinfo ]; then
		export SHARE_PROPERTIES="$(cat $ROOTFS/.proot.shareinfo)"
	fi
	unset LD_PRELOAD
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H \
	$SHARE_PROPERTIES \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /dev/urandom:/dev/random \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-b /storage/emulated/0:/sdcard \
	-b /:/host-rootfs \
	-w /home/$(cat $ROOTFS/etc/userinfo.rc) \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	sudo -u $(cat $ROOTFS/etc/userinfo.rc) "$@"
}

parse-cmd-isol() {
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot start Debian Container. Please install it using debdroid --install"
		exit 2
	fi
	unset LD_PRELOAD
	proot --link2symlink --kill-on-exit \
	-0 -r $ROOTFS -p --sysvipc -H \
	-b /dev \
	-b /proc \
	-b /sys \
	-b /proc/self/fd:/dev/fd \
	-b /proc/self/fd/0:/dev/stdin \
	-b /proc/self/fd/1:/dev/stdout \
	-b /proc/self/fd/2:/dev/stderr \
	-b $PREFIX/tmp:/dev/shm \
	-b $PREFIX/tmp:/tmp \
	-b $ROOTFS/proc/stat:/proc/stat \
	-b $ROOTFS/proc/version:/proc/version \
	-w /home/$(cat $ROOTFS/etc/userinfo.rc) \
	/usr/bin/env -i \
	TERM=xterm-256color \
	HOME=/root \
	USER=root \
	PATH="$PATHBASE" \
	TMPDIR=/tmp \
	LANG=C.UTF-8 \
	sudo -u $(cat $ROOTFS/etc/userinfo.rc) "$@"
}

reinstall() {
	if [ -e $STATUS ]; then
    	:
	else
		echo "Cannot Reinstall Debian Container. Debian isn't installed"
		exit 2
	fi
	uninstall || true
	install-debian
}

if [ $# = 0 ]; then
	show_help
fi

CMD="$1"
shift 1

case "$CMD" in
	--install) install-debian;;
	--uninstall)
		uninstall
		;;
	--reinstall)
		reinstall
		;;
	--launch)
		launch
		;;
	--launch-su)
		launch-su
		;;
	--isolated)
		launch-isol
		;;
	--export)
		exec $STATEFUL/lib/libbackup-rootfs.so
		;;
	--import)
		exec $STATEFUL/lib/librestore-rootfs.so
		;;
	-h|--help|--show-help)
		show_help
		;;
	--send)
		send "$@"
		;;
	--share)
		share "$@"
		;;
	--unshare)
		unshare
		;;
	--)
		parse-cmd "$@"
		;;
	---)
		parse-cmd-isol "$@"
		;;
	*) echo "Unknown Command: '$CMD'"; exit 2;;
esac
